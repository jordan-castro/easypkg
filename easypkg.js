const fs=require('node:fs');;const{exec}=require('child_process');const readline=require('node:readline');let args=process.argv.slice(2,process.argv.length);async function init(){const rl=readline.createInterface({input:process.stdin,output:process.stdout});;console.log('Welcome to the EasyJS project manager');function get_input(msg,fallback){return new Promise((resolve)=>{rl.question(msg,(answer)=>{if(answer==''||answer==null){resolve(fallback)}else{resolve(answer)}})})};let name=await get_input('project name: ','project');let author_name=await get_input('author name: ','');let author_email=await get_input('author email: ','');let runtime=await get_input('runtime: ','node');if(!fs.existsSync(name)){fs.mkdirSync(name)};if(!fs.existsSync(`${name}/src`)){fs.mkdirSync(`${name}/src`)};fs.writeFileSync(`${name}/src/main.ej`,"import 'std'\n@print('Hello from easyJS')\n");fs.writeFileSync(`${name}/${name}.ejconfig`,JSON.stringify({name:name,description:'A new easyjs package.',author:{name:author_name,email:author_email},source:'src/main.ej',final:`${name}.js`,runtime:runtime},undefined,4));rl.close()};function get_config(){let files=fs.readdirSync('./');let config=null;for(let file of files){if(file.endsWith('.ejconfig')){config=JSON.parse(fs.readFileSync(file));break}}return config};function call_easyjs(command){exec(command,(error,stdout,stderr)=>{if(error){console.log(`error executing program: ${error.message}`);process.exit(0)};if(stderr!=''){console.log(stderr)};if(stdout!=''){console.log(stdout)};process.exit(0)})};if(args.length==0){let config=get_config();if(config==null){console.log('No config found');process.exit(1)};call_easyjs(`easyjs run ${config.source} --runtime ${config.runtime}`)};if(args[0]=='init'){(async function(){await init();process.exit(0)})()}else if(args[0]=='test'){console.log('This worked!')}else if(args[0]=='compile'){let config=get_config();if(config==null){console.log('No config found');process.exit(1)};let minify='';if(args[1]=='minify'){minify='--minify'};call_easyjs(`easyjs compile ${config.source} --output ${config.final} ${minify}`)}